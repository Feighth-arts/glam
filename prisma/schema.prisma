generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  phone     String?  @unique
  role      Role     @default(CLIENT)
  status    UserStatus @default(ACTIVE)
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clientBookings       Booking[] @relation("ClientBookings")
  providerBookings     Booking[] @relation("ProviderBookings")
  providerServices     ProviderService[]
  notifications        Notification[]
  userPoints           UserPoints?
  passwordResetTokens  PasswordResetToken[]
  userSessions         UserSession[]
  supportTickets       SupportTicket[]
  clientReviews        Review[] @relation("ClientReviews")
  providerReviews      Review[] @relation("ProviderReviews")
  activityLogs         ActivityLog[]
  rewardRedemptions    RewardRedemption[]
  pointsTransactions   PointsTransaction[]
  platformSettings     PlatformSetting[]
  providerAvailability ProviderAvailability[]
  providerSpecialDates ProviderSpecialDate[]
  bookingTimeSlots     BookingTimeSlot[]
  referralsGiven       Referral[] @relation("UserReferrals")
  referralsReceived    Referral[] @relation("UserReferred")
  providerEarnings     ProviderEarning[]
  bookingStatusChanges BookingStatusHistory[]

  @@map("users")
}

model Service {
  id          Int     @id @default(autoincrement())
  name        String
  categoryId  Int?
  basePrice   Decimal @db.Decimal(10, 2)
  duration    Int
  points      Int
  description String?
  status      ServiceStatus @default(ACTIVE)
  createdAt   DateTime @default(now())

  category         ServiceCategory? @relation(fields: [categoryId], references: [id])
  bookings         Booking[]
  providerServices ProviderService[]
  reviews          Review[]
  bookingTimeSlots BookingTimeSlot[]

  @@map("services")
}

model ProviderService {
  providerId  String
  serviceId   Int
  customPrice Decimal? @db.Decimal(10, 2)
  availability Json?

  provider User    @relation(fields: [providerId], references: [id], onDelete: Cascade)
  service  Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([providerId, serviceId])
  @@map("provider_services")
}

model Booking {
  id              String        @id @default(cuid())
  clientId        String
  providerId      String
  serviceId       Int
  bookingDatetime DateTime
  status          BookingStatus @default(PENDING_PAYMENT)
  amount          Decimal       @db.Decimal(10, 2)
  commission      Decimal       @db.Decimal(10, 2)
  providerEarning Decimal       @db.Decimal(10, 2)
  pointsEarned    Int
  paymentId       String?
  location        String?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  client  User     @relation("ClientBookings", fields: [clientId], references: [id])
  provider User    @relation("ProviderBookings", fields: [providerId], references: [id])
  service Service  @relation(fields: [serviceId], references: [id])
  payment Payment?
  review  Review?
  rewardRedemptions RewardRedemption[]
  statusHistory BookingStatusHistory[]
  timeSlots BookingTimeSlot[]
  earningRecord ProviderEarning?

  @@map("bookings")
}

model Payment {
  id               String        @id @default(cuid())
  bookingId        String        @unique
  mpesaCheckoutId  String?
  phoneNumber      String
  amount           Decimal       @db.Decimal(10, 2)
  status           PaymentStatus @default(INITIATED)
  demoMode         Boolean       @default(true)
  transactionId    String?
  createdAt        DateTime      @default(now())
  completedAt      DateTime?

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Notification {
  id        String             @id @default(cuid())
  userId    String
  type      NotificationType
  status    NotificationStatus @default(PENDING)
  subject   String?
  content   Json
  sentAt    DateTime?
  createdAt DateTime           @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model UserPoints {
  userId         String   @id
  currentPoints  Int      @default(0)
  lifetimePoints Int      @default(0)
  tier           Tier     @default(BRONZE)
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_points")
}

enum Role {
  ADMIN
  PROVIDER
  CLIENT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
}

enum BookingStatus {
  PENDING_PAYMENT
  PAID
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  INITIATED
  PENDING
  COMPLETED
  FAILED
  DEMO_SUCCESS
}

enum NotificationType {
  EMAIL
  SMS
  PUSH
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

enum Tier {
  BRONZE
  GOLD
  PLATINUM
}

model RewardRedemption {
  id                String           @id @default(cuid())
  userId            String
  rewardType        RewardType
  rewardName        String
  pointsUsed        Int
  discountPercentage Int?
  maxDiscountAmount Decimal?         @db.Decimal(10, 2)
  minSpend          Decimal?         @db.Decimal(10, 2)
  status            RedemptionStatus @default(ACTIVE)
  expiresAt         DateTime
  usedAt            DateTime?
  bookingId         String?
  createdAt         DateTime         @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  booking Booking? @relation(fields: [bookingId], references: [id])

  @@map("reward_redemptions")
}

model PointsTransaction {
  id          String                @id @default(cuid())
  userId      String
  type        PointsTransactionType
  points      Int
  source      String
  referenceId String?
  description String?
  createdAt   DateTime              @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("points_transactions")
}

model PlatformSetting {
  id          String   @id @default(cuid())
  category    String
  key         String
  value       Json
  description String?
  updatedBy   String
  updatedAt   DateTime @default(now())

  updater User @relation(fields: [updatedBy], references: [id])

  @@unique([category, key])
  @@map("platform_settings")
}

model ProviderAvailability {
  id          String   @id @default(cuid())
  providerId  String
  dayOfWeek   Int      // 0=Sunday, 1=Monday, etc.
  startTime   String   // "09:00"
  endTime     String   // "17:00"
  isAvailable Boolean  @default(true)
  breakStart  String?
  breakEnd    String?
  createdAt   DateTime @default(now())

  provider User @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@map("provider_availability")
}

model ProviderSpecialDate {
  id          String   @id @default(cuid())
  providerId  String
  date        DateTime @db.Date
  isAvailable Boolean  @default(false)
  reason      String?
  createdAt   DateTime @default(now())

  provider User @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@map("provider_special_dates")
}

model BookingTimeSlot {
  id        String   @id @default(cuid())
  providerId String
  serviceId Int
  date      DateTime @db.Date
  startTime String   // "09:00"
  endTime   String   // "10:30"
  isBooked  Boolean  @default(false)
  bookingId String?
  createdAt DateTime @default(now())

  provider User     @relation(fields: [providerId], references: [id], onDelete: Cascade)
  service  Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  booking  Booking? @relation(fields: [bookingId], references: [id])

  @@map("booking_time_slots")
}

model Referral {
  id            String        @id @default(cuid())
  referrerId    String
  referredId    String
  referralCode  String        @unique
  status        ReferralStatus @default(PENDING)
  pointsAwarded Int           @default(0)
  createdAt     DateTime      @default(now())
  completedAt   DateTime?

  referrer User @relation("UserReferrals", fields: [referrerId], references: [id])
  referred User @relation("UserReferred", fields: [referredId], references: [id])

  @@map("referrals")
}

model ServiceCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  icon        String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  services Service[]

  @@map("service_categories")
}

model BookingStatusHistory {
  id        String        @id @default(cuid())
  bookingId String
  oldStatus BookingStatus?
  newStatus BookingStatus
  changedBy String
  reason    String?
  createdAt DateTime      @default(now())

  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  changedByUser User @relation(fields: [changedBy], references: [id])

  @@map("booking_status_history")
}

model ProviderEarning {
  id               String        @id @default(cuid())
  providerId       String
  bookingId        String        @unique
  grossAmount      Decimal       @db.Decimal(10, 2)
  commissionAmount Decimal       @db.Decimal(10, 2)
  netAmount        Decimal       @db.Decimal(10, 2)
  payoutStatus     PayoutStatus  @default(PENDING)
  payoutDate       DateTime?
  payoutReference  String?
  createdAt        DateTime      @default(now())

  provider User    @relation(fields: [providerId], references: [id], onDelete: Cascade)
  booking  Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("provider_earnings")
}

model EmailTemplate {
  id           String   @id @default(cuid())
  name         String   @unique
  subject      String
  templateHtml String
  templateText String?
  variables    Json?    // Available template variables
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("email_templates")
}

// Additional Enums
enum RewardType {
  DISCOUNT
  FREE_SERVICE
}

enum RedemptionStatus {
  ACTIVE
  USED
  EXPIRED
}

enum PointsTransactionType {
  EARNED
  REDEEMED
  EXPIRED
  BONUS
}

enum ReferralStatus {
  PENDING
  COMPLETED
  REWARDED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model ContactMessage {
  id        String            @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  status    ContactStatus     @default(NEW)
  createdAt DateTime          @default(now())

  @@map("contact_messages")
}

model SupportTicket {
  id          String           @id @default(cuid())
  userId      String
  subject     String
  description String
  status      TicketStatus     @default(OPEN)
  priority    TicketPriority   @default(MEDIUM)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("support_tickets")
}

model Review {
  id         String   @id @default(cuid())
  bookingId  String   @unique
  clientId   String
  providerId String
  serviceId  Int
  rating     Int      @db.SmallInt
  comment    String?
  createdAt  DateTime @default(now())

  booking  Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  client   User    @relation("ClientReviews", fields: [clientId], references: [id])
  provider User    @relation("ProviderReviews", fields: [providerId], references: [id])
  service  Service @relation(fields: [serviceId], references: [id])

  @@map("reviews")
}

model ActivityLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  entityType String
  entityId   String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("activity_logs")
}

enum ContactStatus {
  NEW
  READ
  REPLIED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}